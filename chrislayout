#!/usr/local/bin/python
# vim: set fileencoding=utf8 :
"""My custom tmux layout.

╭─────────┬────────┬─────────╮
│         │ status │         │
│  shell  ├────────┤  shell  │
│         │ status │         │
╰─────────┴────────┴─────────╯

"""
import os, sh
from collections import namedtuple
from sh import tmux
 
class Pane(object):
  _fields = ('id', 'index', 'width', 'height', 'active', 'start_command')

  def __init__(self, id, index, width, height, active, start_command):
    self.id = id
    self.index = index
    self.width = width
    self.height = height
    self.active = active
    self.start_command = start_command

  @property
  def is_interactive(self):
    return not self.start_command or self.start_command.startswith('reattach-to-user-namespace -l')

def getPanes():
  format = ','.join('#{pane_%s}' % field for field in Pane._fields)
  for line in tmux.lsp(F=format):
    yield Pane(*line.strip().split(',', len(Pane._fields) - 1))
 
def getWindowSize():
  for line in tmux.lsw(F="#{window_active},#{window_height},#{window_width}"):
    active, height, width = (int(x) for x in line.strip().split(","))
    if active:
      return height, width
  raise RuntimeError("no active window")
 
def layoutChecksum(l):
  csum = 0
  for c in l:
    csum = (csum >> 1) + ((csum & 1) << 15) + ord(c)
    csum = csum & 0xFFFF
  return csum
 
rows, columns = getWindowSize()
 
panes = list(getPanes())
panes.sort(key=lambda p : int(p.index))
activePane = [p for p in panes if p.active == '1'][0]
 
nPanes = len(panes)
nUtility = sum(1 for p in panes if not p.is_interactive)
nMain = nPanes - nUtility
 
groups = []
ids = []
for p in panes:
  if not p.is_interactive:
    if not groups or not isinstance(groups[-1], list):
      groups.append([])
      ids.append([])
    groups[-1].append(p)
    ids[-1].append(p.id)
  else:
    groups.append(p)
    ids.append(p.id)
 
def withsizes(l, total, listSize=60):
  nLists = sum(1 for g in l if isinstance(g, list))
  n = len(l)
  sizeLeft = total - nLists * (listSize + 1)
  size = (sizeLeft + 1) // (n - nLists) - 1
  firstSize = sizeLeft - (n-nLists-1)*(size+1)
  sizes = [firstSize,] + (n-nLists-1)*[size,]
  for g in l:
    if isinstance(g, list):
      yield listSize, g
    else:
      yield sizes.pop(0), g
 
width = (columns + 1) // len(groups) - 1
firstWidth = columns - (len(groups)-1)*(width+1)
 
formatComponents = []
x = 0
for width, g in withsizes(groups, columns):
  fmt = "%dx%d,%d,0" % (width, rows, x)
  if isinstance(g, list):
    subcomponents = []
    y = 0
    for height, p in withsizes(g, rows):
      subfmt = "%dx%d,%d,%d" % (width, height, x, y)
      subcomponents.append(subfmt)
      y += height + 1
    fmt = "%s[%s]" % (fmt, ",".join(subcomponents))
  formatComponents.append(fmt)
  x += width + 1
 
formatString = "%dx%d,0,0{%s}" % (columns, rows, ",".join(formatComponents))
formatString = "%04x,%s" % (layoutChecksum(formatString), formatString)
tmux.selectl(formatString)
tmux.refresh()

